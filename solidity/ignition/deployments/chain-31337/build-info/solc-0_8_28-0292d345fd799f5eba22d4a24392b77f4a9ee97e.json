{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-0292d345fd799f5eba22d4a24392b77f4a9ee97e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/TodoList.sol": "project/contracts/TodoList.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/TodoList.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Todolist {\n struct Task {\n  uint256 id;\n  string name;\n  bool isCompleted;\n }\n\n uint256 private taskCount;\n mapping(uint256 => Task) private tasks;\n uint256[] private tasksIds;\n Task lastUpdatedTask;\n\n constructor() {\n  taskCount = 0;\n }\n\n function createTask(string memory _name) public {\n  Task memory task = Task(taskCount, _name, false);\n  tasks[taskCount] = task;\n  tasksIds.push(taskCount);\n  taskCount++;\n }\n\n function getTask(uint256 _id) public view returns (Task memory) {\n  return tasks[_id];\n }\n\n function updateTask(uint256 _id, string memory name) public {\n  tasks[_id].name = name;\n  lastUpdatedTask = tasks[_id];\n }\n\n function getUpdatedTask() public view returns (Task memory) {\n  return lastUpdatedTask;\n }\n\n function deleteTask(uint256 _id) public {\n  delete tasks[_id];\n\n  for (uint256 i = 0; i < tasksIds.length; i++) {\n   if (tasksIds[i] == _id) {\n    tasksIds[i] = tasksIds[tasksIds.length - 1];\n    tasksIds.pop();\n    break;\n   }\n  }\n }\n\n function getTasksIds() public view returns (uint256[] memory) {\n  return tasksIds;\n }\n\n function completeTask(uint256 _id) public {\n  tasks[_id].isCompleted = true;\n }\n\n}\n"
      }
    }
  }
}